@model SatışProject.Models.BasketViewModel
@{
    ViewData["Title"] = "Sepetim - Hırdavat Dünyası";
    Layout = null;
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <link rel="stylesheet" href="~/css/WebSite2.css" />
    <link rel="stylesheet" href="~/css/Basket.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.10.1/dist/sweetalert2.min.css">



</head>
<body>
    @await Component.InvokeAsync("_DefaultLayoutHeaderPartials")

    <main class="container">
        <h1 class="cart-title">Sepetim</h1>

        @if (!string.IsNullOrEmpty(ViewBag.BasketMessage))
        {
            <div class="empty-cart-message">
                <p>Sepetinizde henüz ürün bulunmamaktadır.</p>
                <a href="/Product/Index" class="checkout-button" style="width: auto; display: inline-block; margin-top: 25px; background-color: #3498db;">Alışverişe Başla</a>
            </div>
        }
        else
        {
            <div class="cart-page-container">
                <section class="cart-items-section">
                    @foreach (var item in Model.BasketItems)
                    {
                        <div class="cart-item" data-basket-item-id="@item.BasketItemId" data-product-id="@item.ProductId" data-unit-price="@item.UnitPrice">
                            <div class="cart-item-image">
                                <img src="@item.ImageUrl" alt="@item.ProductName">
                            </div>
                            <div class="cart-item-details">
                                <h4>@item.ProductName</h4>
                                <p>Birim Fiyat: @item.UnitPrice.ToString("C2", new System.Globalization.CultureInfo("tr-TR"))</p>
                            </div>
                            <div class="cart-item-quantity">
                                <button class="quantity-btn decrease-quantity" data-basket-item-id="@item.BasketItemId">-</button>
                                <input type="number" value="@item.Quantity" min="1" class="quantity-input" data-basket-item-id="@item.BasketItemId" />
                                <button class="quantity-btn increase-quantity" data-basket-item-id="@item.BasketItemId">+</button>
                            </div>
                            <div class="cart-item-price" id="subtotal-@item.BasketItemId">
                                @item.Subtotal.ToString("C2", new System.Globalization.CultureInfo("tr-TR"))
                            </div>
                            <button class="cart-item-remove" data-basket-item-id="@item.BasketItemId">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </div>
                    }
                </section>

                <section class="cart-summary-section">
                    <h3>Sepet Özeti</h3>
                    <div class="summary-line">
                        <span>Ürün Adedi:</span>
                        <span id="summary-item-count">@Model.BasketItems.Sum(x => x.Quantity)</span>
                    </div>
                    <div class="summary-line subtotal">
                        <span>Ara Toplam (KDV Hariç):</span>
                        <span id="summary-subtotal-price">@Model.TotalPrice.ToString("C2", new System.Globalization.CultureInfo("tr-TR"))</span>
                    </div>
                    @{
                        decimal kdvRate = 0.18m; // 18% KDV oranı
                        decimal kdvAmount = Model.TotalPrice * kdvRate;
                        decimal grandTotal = Model.TotalPrice + kdvAmount;
                    }
                    <div class="summary-line vat">
                        <span>KDV (@(kdvRate * 100)%) :</span>
                        <span id="summary-vat-amount">@kdvAmount.ToString("C2", new System.Globalization.CultureInfo("tr-TR"))</span>
                    </div>
                    <div class="summary-line total">
                        <span>Genel Toplam:</span>
                        <span id="summary-grand-total-price">@grandTotal.ToString("C2", new System.Globalization.CultureInfo("tr-TR"))</span>
                    </div>
                    <a href="#" class="checkout-button">Ödeme Yap</a>
                </section>
            </div>
        }
    </main>

    @await Component.InvokeAsync("_DefaultLayoutFooterPartials")

    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/js/all.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.10.1/dist/sweetalert2.all.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const basketItemCountSpan = document.getElementById('basket-item-count');
            const quantityInputs = document.querySelectorAll('.quantity-input');
            const decreaseButtons = document.querySelectorAll('.decrease-quantity');
            const increaseButtons = document.querySelectorAll('.increase-quantity');
            const removeButtons = document.querySelectorAll('.cart-item-remove');
            const summaryItemCount = document.getElementById('summary-item-count');
            const summarySubtotalPrice = document.getElementById('summary-subtotal-price');
            const summaryVatAmount = document.getElementById('summary-vat-amount');
            const summaryGrandTotalPrice = document.getElementById('summary-grand-total-price');

            const kdvRate = 0.18; // KDV oranı sabit

            // Sepet sayacını ve özetini güncelleyen fonksiyon
            function updateGlobalBasketCount(newCount) {
                if (basketItemCountSpan) {
                    basketItemCountSpan.textContent = newCount;
                }
            }

            // Sepet özetini güncelleyen fonksiyon
            function updateSummary(basketItemCount, subtotal) {
                const vatAmount = subtotal * kdvRate;
                const grandTotal = subtotal + vatAmount;

                summaryItemCount.textContent = basketItemCount;
                summarySubtotalPrice.textContent = subtotal.toLocaleString('tr-TR', { style: 'currency', currency: 'TRY' });
                summaryVatAmount.textContent = vatAmount.toLocaleString('tr-TR', { style: 'currency', currency: 'TRY' });
                summaryGrandTotalPrice.textContent = grandTotal.toLocaleString('tr-TR', { style: 'currency', currency: 'TRY' });

                // Eğer sepet tamamen boşaldıysa "Sepetinizde ürün bulunmamaktadır" mesajını göster
                if (basketItemCount === 0) {
                    const cartPageContainer = document.querySelector('.cart-page-container');
                    if (cartPageContainer) {
                        cartPageContainer.innerHTML = `
                                    <div class="empty-cart-message">
                                        <p>Sepetinizde henüz ürün bulunmamaktadır.</p>
                                        <a href="/Product/Index" class="checkout-button" style="width: auto; display: inline-block; margin-top: 25px; background-color: #3498db;">Alışverişe Başla</a>
                                    </div>
                                `;
                    }
                }
            }

            // Sayfa yüklendiğinde sepet verilerini çek ve UI'ı güncelle
            fetchBasketDataAndUpdateUI();

            async function fetchBasketDataAndUpdateUI() {
                try {
                    const response = await fetch('/Basket/GetBasketSummary', {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const data = await response.json();

                    if (data.success) {
                        updateGlobalBasketCount(data.basketItemCount);
                        updateSummary(data.basketItemCount, data.newTotal); // C# tarafından ham decimal geldi
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Sepet Yüklenemedi!',
                            text: 'Sepet bilgileriniz yüklenirken bir sorun oluştu.',
                            confirmButtonText: 'Tamam'
                        });
                    }
                } catch (error) {
                    console.error('Sepet özeti alınırken hata:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Bağlantı Hatası!',
                        text: 'Sepet bilgileri alınırken sunucuya ulaşılamadı. Lütfen internet bağlantınızı kontrol edin.',
                        confirmButtonText: 'Tamam'
                    });
                }
            }

            // Miktar input'u değiştiğinde
            quantityInputs.forEach(input => {
                input.addEventListener('change', function () {
                    let newQuantity = parseInt(this.value);
                    const basketItemId = this.dataset.basketItemId;

                    if (isNaN(newQuantity) || newQuantity < 0) { // Negatif veya geçersiz giriş olursa
                        newQuantity = 0; // Silme işlemi için 0'a ayarla
                        this.value = 0; // Görsel olarak da sıfırla (eğer enter tuşuna basılırsa)
                    }
                    updateBasketItemQuantity(basketItemId, newQuantity, this);
                });
            });

            // Miktarı azaltma butonu
            decreaseButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const basketItemId = this.dataset.basketItemId;
                    const input = document.querySelector(`.quantity-input[data-basket-item-id="${basketItemId}"]`);
                    let newQuantity = parseInt(input.value) - 1;

                    if (newQuantity < 0) {
                        newQuantity = 0; // Miktar 0'ın altına düşerse, ürünü silmek için 0'a ayarla
                    }
                    updateBasketItemQuantity(basketItemId, newQuantity, input);
                });
            });

            // Miktarı artırma butonu
            increaseButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const basketItemId = this.dataset.basketItemId;
                    const input = document.querySelector(`.quantity-input[data-basket-item-id="${basketItemId}"]`);
                    let newQuantity = parseInt(input.value) + 1;

                    updateBasketItemQuantity(basketItemId, newQuantity, input);
                });
            });

            // Miktar güncelleme AJAX isteği
            async function updateBasketItemQuantity(basketItemId, newQuantity, quantityInput) {
                const itemCard = quantityInput.closest('.cart-item');
                const unitPrice = parseFloat(itemCard.dataset.unitPrice); // data-unit-price özniteliğinden birim fiyatı al

                try {
                    const response = await fetch('/Basket/UpdateQuantity', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ basketItemId: parseInt(basketItemId), newQuantity: newQuantity })
                    });
                    const data = await response.json();

                    if (data.success) {
                        if (data.removed) { // Ürün kaldırıldıysa
                            itemCard.remove(); // Kartı DOM'dan kaldır
                            Swal.fire({
                                title: 'Ürün Kaldırıldı!',
                                text: 'Ürün sepetinizden başarıyla kaldırıldı.',
                                icon: 'info',
                                showConfirmButton: false,
                                timer: 1500,
                                timerProgressBar: true
                            });
                        } else {
                            quantityInput.value = newQuantity; // Input'u güncel miktarla güncelle
                            const subtotalElement = document.getElementById(`subtotal-${basketItemId}`);
                            subtotalElement.textContent = (newQuantity * unitPrice).toLocaleString('tr-TR', { style: 'currency', currency: 'TRY' });

                            Swal.fire({
                                title: 'Miktar Güncellendi!',
                                text: 'Ürün miktarı başarıyla güncellendi.',
                                icon: 'success',
                                showConfirmButton: false,
                                timer: 1500,
                                timerProgressBar: true
                            });
                        }
                        updateGlobalBasketCount(data.basketItemCount);
                        updateSummary(data.basketItemCount, data.newTotal); // Ham decimal kullan
                    } else {
                        if (data.currentQuantity !== undefined) {
                            quantityInput.value = data.currentQuantity; // Stok yetersizse input'u eski haline getir
                        }
                        Swal.fire({
                            icon: 'error',
                            title: 'Miktar Güncellenemedi!',
                            text: data.message || 'Ürün miktarı güncellenirken bir sorun oluştu.',
                            confirmButtonText: 'Tamam'
                        });
                    }
                } catch (error) {
                    console.error('Miktar güncelleme AJAX hatası:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Bağlantı Hatası!',
                        text: 'Miktar güncellenirken sunucuya ulaşılamadı. Lütfen internet bağlantınızı kontrol edin.',
                        confirmButtonText: 'Tamam'
                    });
                }
            }

            // Ürün kaldırma butonu
            removeButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const basketItemId = this.dataset.basketItemId;

                    Swal.fire({
                        title: 'Emin misiniz?',
                        text: "Bu ürünü sepetinizden kaldırmak istediğinizden emin misiniz?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#e74c3c',
                        cancelButtonColor: '#34495e',
                        confirmButtonText: 'Evet, Kaldır!',
                        cancelButtonText: 'Vazgeç'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            removeBasketItem(basketItemId);
                        }
                    });
                });
            });

            // Ürün kaldırma AJAX isteği
            async function removeBasketItem(basketItemId) {
                try {
                    const response = await fetch('/Basket/RemoveItem', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ basketItemId: parseInt(basketItemId) })
                    });
                    const data = await response.json();

                    if (data.success) {
                        const itemCard = document.querySelector(`.cart-item[data-basket-item-id="${basketItemId}"]`);
                        if (itemCard) {
                            itemCard.remove();
                        }
                        updateGlobalBasketCount(data.basketItemCount);
                        updateSummary(data.basketItemCount, data.newTotal); // Ham decimal kullan

                        Swal.fire({
                            title: 'Kaldırıldı!',
                            text: 'Ürün sepetinizden başarıyla kaldırıldı.',
                            icon: 'success',
                            showConfirmButton: false,
                            timer: 1500,
                            timerProgressBar: true
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Kaldırılamadı!',
                            text: data.message || 'Ürün sepetten kaldırılırken bir sorun oluştu.',
                            confirmButtonText: 'Tamam'
                        });
                    }
                } catch (error) {
                    console.error('Ürün kaldırma AJAX hatası:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Bağlantı Hatası!',
                        text: 'Ürün kaldırılırken sunucuya ulaşılamadı. Lütfen internet bağlantınızı kontrol edin.',
                        confirmButtonText: 'Tamam'
                    });
                }
            }
        });
    </script>
</body>
</html>